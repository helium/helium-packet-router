[
    {hpr, [
        {key, "data/hpr.key"},
        {packet_reporter, #{
            aws_bucket => <<"test-bucket">>,
            aws_bucket_region => <<"local">>,
            report_interval => 300_000,
            report_max_size => 50_000_000
        }},
        {iot_config_service, #{
            transport => http,
            host => "localhost",
            port => 8085
        }},
        {downlink_service, #{
            transport => http,
            host => "localhost",
            port => "8086"
        }},
        {multi_buy_service, #{
            transport => http,
            host => "localhost",
            port => "8087"
        }},
        {multi_buy_enabled, true},
        {routing_cache_window_secs, 5},
        {routing_cache_timeout_secs, 10}
    ]},
    {aws_credentials, [
        {credential_providers, [aws_credentials_env]},
        {aws_access_key_id, "testkey"},
        {aws_secret_access_key, "testsecret"},
        {aws_default_region, "local"}
    ]},
    {grpcbox, [
        %% default_channel is used by the test gateway.
        {client, #{channels => [{default_channel, [{http, "localhost", 8080, []}], #{}}]}},
        %% This is default GRPC Server to get data from hotspots
        {servers, [
            #{
                grpc_opts => #{
                    service_protos => [packet_router_pb],
                    services => #{
                        'helium.packet_router.packet' => hpr_packet_router_service
                    }
                },
                transport_opts => #{ssl => false},
                listen_opts => #{
                    port => 8080,
                    ip => {0, 0, 0, 0}
                },
                pool_opts => #{size => 500},
                server_opts => #{
                    header_table_size => 4096,
                    enable_push => 1,
                    max_concurrent_streams => unlimited,
                    initial_window_size => 65535,
                    max_frame_size => 16384,
                    max_header_list_size => unlimited
                }
            },
            %% IOT Config Service
            #{
                grpc_opts => #{
                    service_protos => [iot_config_pb],
                    services => #{
                        'helium.iot_config.route' => hpr_test_iot_config_service_route
                    }
                },
                transport_opts => #{ssl => false},
                listen_opts => #{
                    port => 8085,
                    ip => {0, 0, 0, 0}
                },
                pool_opts => #{size => 500},
                server_opts => #{
                    header_table_size => 4096,
                    enable_push => 1,
                    max_concurrent_streams => unlimited,
                    initial_window_size => 65535,
                    max_frame_size => 16384,
                    max_header_list_size => unlimited
                }
            },
            %% HTTP Roaming Downlink Service
            #{
                grpc_opts => #{
                    service_protos => [downlink_pb],
                    services => #{
                        'helium.downlink.http_roaming' => hpr_test_downlink_service_http_roaming
                    }
                },
                transport_opts => #{ssl => false},
                listen_opts => #{
                    port => 8086,
                    ip => {0, 0, 0, 0}
                },
                pool_opts => #{size => 500},
                server_opts => #{
                    header_table_size => 4096,
                    enable_push => 1,
                    max_concurrent_streams => unlimited,
                    initial_window_size => 65535,
                    max_frame_size => 16384,
                    max_header_list_size => unlimited
                }
            },
            %% Multi Buy Service
            #{
                grpc_opts => #{
                    service_protos => [multi_buy_pb],
                    services => #{
                        'helium.multi_buy.multi_buy' => hpr_test_multi_buy_service
                    }
                },
                transport_opts => #{ssl => false},
                listen_opts => #{
                    port => 8087,
                    ip => {0, 0, 0, 0}
                },
                pool_opts => #{size => 500},
                server_opts => #{
                    header_table_size => 4096,
                    enable_push => 1,
                    max_concurrent_streams => unlimited,
                    initial_window_size => 65535,
                    max_frame_size => 16384,
                    max_header_list_size => unlimited
                }
            }
        ]}
    ]},
    {lager, [
        {suppress_supervisor_start_stop, true},
        {log_root, "log/hpr"},
        {crash_log, "crash.log"},
        {handlers, [
            {lager_console_backend, [
                {level, debug},
                {formatter_config, [
                    "time=",
                    date,
                    "T",
                    time,
                    " lvl=",
                    severity_upper,
                    " ",
                    metadata,
                    " msg=\"",
                    message,
                    "\"",
                    "\n"
                ]}
            ]},
            {lager_file_backend, [
                {file, "debug.log"},
                {level, debug},
                {size, 0},
                {date, "$D0"},
                {count, 7},
                {formatter_config, [
                    "time=",
                    date,
                    "T",
                    time,
                    " lvl=",
                    severity_upper,
                    " ",
                    metadata,
                    " msg=\"",
                    message,
                    "\"",
                    "\n"
                ]}
            ]}
        ]}
    ]},
    {prometheus, [
        {collectors, [
            prometheus_boolean,
            prometheus_counter,
            prometheus_gauge,
            prometheus_histogram,
            prometheus_vm_memory_collector,
            prometheus_vm_system_info_collector
        ]},
        {vm_system_info_collector_metrics, [process_count, port_count]}
    ]}
].
