[
    {hpr, [
        {key, "/var/data/hpr.key"},
        {http_roaming_sender_nsid, <<"${HPR_ROAMING_SENDER_NSID}">>},
        {no_routes, [{"${HPR_PP_HOST_1}", 8080}, {"${HPR_PP_HOST_2}", 8080}]},
        {packet_reporter, #{
            aws_bucket => <<"${HPR_PACKET_REPORTER_AWS_BUCKET}">>,
            aws_bucket_region => <<"${HPR_PACKET_REPORTER_AWS_BUCKET_REGION}">>,
            report_interval => 300_000,
            report_max_size => 50_000_000
        }},
        {iot_config_service, #{
            transport => "${HPR_IOT_CONFIG_TRANSPORT}",
            host => "${HPR_IOT_CONFIG_HOST}",
            port => "${HPR_IOT_CONFIG_PORT}"
        }},
        {downlink_service, #{
            transport => "${HPR_DOWNLINK_SERVICE_TRANSPORT}",
            host => "${HPR_DOWNLINK_SERVICE_HOST}",
            port => "${HPR_DOWNLINK_SERVICE_PORT}"
        }},
        {multi_buy_service, #{
            transport => "${HPR_MULTI_BUY_SERVICE_TRANSPORT}",
            host => "${HPR_MULTI_BUY_SERVICE_HOST}",
            port => "${HPR_MULTI_BUY_SERVICE_PORT}"
        }},
        {routing_cleanup_timer_secs, 15},
        {routing_cleanup_window_secs, 120}
    ]},
    {aws_credentials, [
        {credential_providers, [aws_credentials_env, aws_credentials_ec2]}
        %% uncomment for env usage
        %% {aws_access_key_id, "${HPR_PACKET_REPORTER_AWS_KEY}"},
        %% {aws_secret_access_key, "${HPR_PACKET_REPORTER_AWS_SECRET}"},
        %% {aws_default_region, "${HPR_PACKET_REPORTER_AWS_REGION}"}
    ]},
    {chatterbox, [
        {client_initial_window_size, 16777216},
        {server_initial_window_size, 16777216}
    ]},
    {grpcbox, [
        {listen_opts, #{port => 8080, ip => {0, 0, 0, 0}}},
        {servers, [
            #{
                grpc_opts => #{
                    service_protos => [packet_router_pb],
                    services => #{
                        'helium.packet_router.packet' => hpr_packet_router_service
                    }
                },
                transport_opts => #{ssl => false},
                listen_opts => #{
                    port => 8080,
                    ip => {0, 0, 0, 0}
                },
                pool_opts => #{size => 500},
                server_opts => #{
                    header_table_size => 4096,
                    enable_push => 1,
                    max_concurrent_streams => unlimited,
                    initial_window_size => 16777216,
                    max_frame_size => 16384,
                    max_header_list_size => unlimited
                }
            }
        ]}
    ]},
    {lager, [
        {suppress_supervisor_start_stop, true},
        {log_root, "/var/log/hpr"},
        {crash_log, "crash.log"},
        {handlers, [
            {lager_file_backend, [
                {file, "info.log"},
                {level, info},
                {size, 0},
                {date, "$D0"},
                {count, 7},
                {formatter_config, [
                    "time=",
                    date,
                    "T",
                    time,
                    " lvl=",
                    severity_upper,
                    " ",
                    metadata,
                    " msg=\"",
                    message,
                    "\"",
                    "\n"
                ]}
            ]}
        ]}
    ]},
    {prometheus, [
        {collectors, [
            prometheus_boolean,
            prometheus_counter,
            prometheus_gauge,
            prometheus_histogram,
            prometheus_vm_memory_collector,
            prometheus_vm_system_info_collector
        ]},
        {vm_system_info_collector_metrics, [process_count, port_count]}
    ]}
].
